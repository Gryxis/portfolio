"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[1],{6001:(R,d,r)=>{r.r(d),r.d(d,{GameOfLifeModule:()=>y});var e=r(4438),u=r(177),l=r(4341),h=r(4512);const p=()=>({standalone:!0}),b=i=>({"living-cell":i});function G(i,m){if(1&i){const t=e.RV6();e.qex(0),e.j41(1,"label",21)(2,"input",22),e.mxI("ngModelChange",function(n){e.eBV(t);const a=e.XpG().index,o=e.XpG().index,f=e.XpG();return e.DH7(f.currentState[o][a],n)||(f.currentState[o][a]=n),e.Njj(n)}),e.k0s()(),e.bVm()}if(2&i){const t=e.XpG().index,s=e.XpG().index,n=e.XpG();e.R7$(),e.Y8G("ngClass",e.eq3(4,b,n.currentState[s][t])),e.R7$(),e.R50("ngModel",n.currentState[s][t]),e.Y8G("id","game-of-life-cell-"+s+"-"+t)("ngModelOptions",e.lJ4(6,p))}}function F(i,m){if(1&i&&(e.qex(0),e.nrm(1,"div",23),e.bVm()),2&i){const t=e.XpG().$implicit;e.R7$(),e.Y8G("ngClass",e.eq3(1,b,t))}}function v(i,m){if(1&i&&(e.qex(0),e.DNE(1,G,3,7,"ng-container",20)(2,F,2,3,"ng-container",20),e.bVm()),2&i){const t=e.XpG(2);e.R7$(),e.Y8G("ngIf",!t.isRunning),e.R7$(),e.Y8G("ngIf",t.isRunning)}}function M(i,m){if(1&i&&(e.j41(0,"div",18),e.DNE(1,v,3,2,"ng-container",19),e.k0s()),2&i){const t=m.$implicit;e.R7$(),e.Y8G("ngForOf",t)}}let O=(()=>{class i{constructor(){this.size=16,this.currentState=[],this.isRunning=!1,this.fps=5,this.soupChance=30,this.sizeTooltip="Configure the size of the square grid,I recommend to use ~64. larger grids may lead to performance issues.",this.fpsTooltip="Configure speed of the simulation in frames per second",this.soupTooltip='This way you can create some "soup", a.k.a random grid with the given percentage of cells alive'}onCreate(){this.pauseGame(),this.currentState=[];for(let t=0;t<this.size;t++)this.currentState[t]=new Array(this.size),this.currentState[t].fill(!1)}onFillSoup(){this.currentState=this.currentState.map((t,s,n)=>t.map((a,o)=>Math.random()<=this.soupChance/100))}onKillAll(){this.pauseGame(),this.currentState=this.currentState.map(t=>t.map(s=>!1))}onStartOrPause(){this.isRunning?this.pauseGame():this.startGame()}pauseGame(){this.isRunning=!1,this.simulationInterval&&(clearInterval(this.simulationInterval),this.simulationInterval=void 0)}startGame(){this.pauseGame(),this.isRunning=!0,this.simulationInterval=setInterval(()=>{this.step()},1e3/this.fps)}step(){this.currentState=this.currentState.map((t,s,n)=>t.map((a,o)=>{let f=0;for(let g=-1;g<=1;g++)for(let c=-1;c<=1;c++)if(c||g){let C={y:(this.size+s+g)%this.size,x:(this.size+o+c)%this.size};n[C.y][C.x]&&f++}return!a&&3===f||!(!a||![2,3].includes(f))}))}static{this.\u0275fac=function(s){return new(s||i)}}static{this.\u0275cmp=e.VBU({type:i,selectors:[["app-game-of-life"]],decls:50,vars:20,consts:[[1,"mb-5"],[1,"d-flex","mb-3"],[1,"input-group","me-4",2,"width","20rem",3,"ngbTooltip"],[1,"input-group-text"],["type","number",1,"form-control",3,"ngModelChange","ngModel","disabled","ngModelOptions"],["type","button",1,"btn","btn-outline-secondary",3,"click"],[1,"input-group",2,"width","20rem",3,"ngbTooltip"],["type","number","min","1","max","30",1,"form-control",3,"ngModelChange","disabled","ngModel","ngModelOptions"],[1,"input-group","mb-3",2,"width","20rem",3,"ngbTooltip"],["type","number","min","1","max","99",1,"form-control",3,"ngModelChange","disabled","ngModel","ngModelOptions"],["type","button",1,"btn","btn-outline-secondary",3,"click","disabled"],[1,"d-flex","mb-5"],["type","button",1,"btn","btn-primary",3,"click","disabled"],[3,"ngClass"],["type","button",1,"btn","btn-secondary",3,"click","disabled"],[1,"icon-refresh-ccw"],["aria-label","grid of the game of life",1,"game-of-life-grid","container-xxl"],["class","game-of-life-row",4,"ngFor","ngForOf"],[1,"game-of-life-row"],[4,"ngFor","ngForOf"],[4,"ngIf"],["aria-label","checkbox for whether the cell is alive (true) or not",1,"game-of-life-cell",3,"ngClass"],["type","checkbox",3,"ngModelChange","ngModel","id","ngModelOptions"],[1,"game-of-life-cell",3,"ngClass"]],template:function(s,n){1&s&&(e.j41(0,"h1"),e.EFF(1," Conway's Game of Life\n"),e.k0s(),e.j41(2,"p"),e.EFF(3," This is a small implementation of Conway's game of life.\n"),e.k0s(),e.j41(4,"p"),e.EFF(5," It is a small game which follows these rules:\n"),e.k0s(),e.j41(6,"ol")(7,"li"),e.EFF(8," If a cell is dead and has exactly 3 living neighbours, it becomes alive. "),e.k0s(),e.j41(9,"li"),e.EFF(10," If a cell is alive and less than 2 neighbours are alive, it dies of loneliness "),e.k0s(),e.j41(11,"li"),e.EFF(12," If a cell is alive and has 2 or 3 living neighbours, it survives. "),e.k0s(),e.j41(13,"li"),e.EFF(14," If a cell is alive and more than 3 neighbours are also alive, it dies due to overpopulation "),e.k0s()(),e.j41(15,"p"),e.EFF(16," Below you will find a implementation. Since i can not provide you with a infinite grid,"),e.nrm(17,"br"),e.EFF(18," I will let you choose the size of a sqare. This square is a toroid, meaning if the grid reaches the boundary,"),e.nrm(19,"br"),e.EFF(20," it will continue on the other side."),e.nrm(21,"br"),e.k0s(),e.j41(22,"p",0),e.EFF(23," This game has some very interesting patterns so feel free to try them out:\n"),e.k0s(),e.j41(24,"div",1)(25,"div",2)(26,"span",3),e.EFF(27,"Size of the grid"),e.k0s(),e.j41(28,"input",4),e.mxI("ngModelChange",function(o){return e.DH7(n.size,o)||(n.size=o),o}),e.k0s(),e.j41(29,"button",5),e.bIt("click",function(){return n.onCreate()}),e.EFF(30," Create grid "),e.k0s()(),e.j41(31,"div",6)(32,"span",3),e.EFF(33," FPS"),e.k0s(),e.j41(34,"input",7),e.mxI("ngModelChange",function(o){return e.DH7(n.fps,o)||(n.fps=o),o}),e.k0s()()(),e.j41(35,"div",8)(36,"span",3),e.EFF(37," Soup"),e.k0s(),e.j41(38,"input",9),e.mxI("ngModelChange",function(o){return e.DH7(n.soupChance,o)||(n.soupChance=o),o}),e.k0s(),e.j41(39,"span",3),e.EFF(40," (%)"),e.k0s(),e.j41(41,"button",10),e.bIt("click",function(){return n.onFillSoup()}),e.EFF(42," Fill Soup "),e.k0s()(),e.j41(43,"div",11)(44,"button",12),e.bIt("click",function(){return n.onStartOrPause()}),e.nrm(45,"span",13),e.k0s(),e.j41(46,"button",14),e.bIt("click",function(){return n.onKillAll()}),e.nrm(47,"span",15),e.k0s()(),e.j41(48,"div",16),e.DNE(49,M,2,1,"div",17),e.k0s()),2&s&&(e.R7$(25),e.Y8G("ngbTooltip",n.sizeTooltip),e.R7$(3),e.R50("ngModel",n.size),e.Y8G("disabled",n.isRunning)("ngModelOptions",e.lJ4(17,p)),e.R7$(3),e.Y8G("ngbTooltip",n.fpsTooltip),e.R7$(3),e.Y8G("disabled",n.isRunning),e.R50("ngModel",n.fps),e.Y8G("ngModelOptions",e.lJ4(18,p)),e.R7$(),e.Y8G("ngbTooltip",n.soupTooltip),e.R7$(3),e.Y8G("disabled",n.isRunning),e.R50("ngModel",n.soupChance),e.Y8G("ngModelOptions",e.lJ4(19,p)),e.R7$(3),e.Y8G("disabled",n.isRunning||n.soupChance<0||n.soupChance>100),e.R7$(3),e.Y8G("disabled",!n.currentState.length||!n.fps||n.fps>30),e.R7$(),e.Y8G("ngClass",n.isRunning?"icon-pause":"icon-play"),e.R7$(),e.Y8G("disabled",!n.fps||n.fps>30),e.R7$(3),e.Y8G("ngForOf",n.currentState))},dependencies:[u.YU,u.Sq,u.bT,l.me,l.Q0,l.Zm,l.BC,l.VZ,l.zX,l.vS,h.md],styles:[".game-of-life-grid[_ngcontent-%COMP%]   .game-of-life-row[_ngcontent-%COMP%]{display:flex;flex-wrap:nowrap}.game-of-life-grid[_ngcontent-%COMP%]   .game-of-life-cell[_ngcontent-%COMP%]{width:1rem;min-width:1rem;height:1rem;min-height:1rem;background-color:var(--bs-gray-200);border:1px solid}.game-of-life-grid[_ngcontent-%COMP%]   .game-of-life-cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{opacity:0;height:100%;width:100%}.game-of-life-grid[_ngcontent-%COMP%]   .game-of-life-cell.living-cell[_ngcontent-%COMP%]{background-color:var(--bs-green)}"]})}}return i})();var _=r(7513);const k=[{path:"",component:O}];let y=(()=>{class i{static{this.\u0275fac=function(s){return new(s||i)}}static{this.\u0275mod=e.$C({type:i})}static{this.\u0275inj=e.G2t({imports:[u.MD,l.YN,h.n8,_.iI.forChild(k),_.iI]})}}return i})()}}]);